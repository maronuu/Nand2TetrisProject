// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not(in=sel[0], out=sel0not);
    Not(in=sel[1], out=sel1not);
    Not(in=sel[2], out=sel2not);

    And(a=sel1not, b=sel0not, out=ae);  // 00
    And(a=sel1not, b=sel[0], out=bf);   // 01
    And(a=sel[1], b=sel0not, out=cg);   // 10
    And(a=sel[1], b=sel[0], out=dh);    // 11

    And(a=ae, b=sel2not, out=wa);
    And(a=ae, b=sel[2], out=we);
    And(a=bf, b=sel2not, out=wb);
    And(a=bf, b=sel[2], out=wf);
    And(a=cg, b=sel2not, out=wc);
    And(a=cg, b=sel[2], out=wg);
    And(a=dh, b=sel2not, out=wd);
    And(a=dh, b=sel[2], out=wh);

    And16vs1(a=a, b=wa, out=va);
    And16vs1(a=b, b=wb, out=vb);
    And16vs1(a=c, b=wc, out=vc);
    And16vs1(a=d, b=wd, out=vd);
    And16vs1(a=e, b=we, out=ve);
    And16vs1(a=f, b=wf, out=vf);
    And16vs1(a=g, b=wg, out=vg);
    And16vs1(a=h, b=wh, out=vh);

    Or16(a=va, b=vb, out=vab);
    Or16(a=vc, b=vd, out=vcd);
    Or16(a=ve, b=vf, out=vef);
    Or16(a=vg, b=vh, out=vgh);
    Or16(a=vab, b=vcd, out=vabcd);
    Or16(a=vef, b=vgh, out=vefgh);
    Or16(a=vabcd, b=vefgh, out=out);
}