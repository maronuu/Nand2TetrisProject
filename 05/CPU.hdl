// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the vALUe of this location. If the current instruction needs 
 * to write a vALUe to M, the vALUe is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any vALUe may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new vALUes only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M vALUe input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M vALUe output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // decode instruction
    // i = inst[15]
    // a = inst[12], c=inst[6:11]
    // d = inst[3:5]
    // j = inst[0:2]


    // A-Register
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=instALU);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=Aregload);
    ARegister(in=instALU, load=Aregload, out=Aregout, out[0..14]=addressM);
    
    // A/M -> AorM
    Mux16(a=Aregout, b=inM, sel=instruction[12], out=AorM);
    
    // ALU -> ALUout | outM
    ALU(x=dout, y=AorM, 
        // control bits
        zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=ALUout, out=outM, zr=ALUzr, ng=ALUng);
    
    // D-Register
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=ALUout, load=dload, out=dout);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // jmp check
    And(a=ALUng, b=instruction[2], out=negJmp);
    And(a=ALUzr, b=instruction[1], out=zeroJmp);
    Or(a=ALUng, b=ALUzr, out=ALUngzr);
    Not(in=ALUngzr, out=ALUpos);
    And(a=ALUpos, b=instruction[0], out=posJmp);
    Or(a=negJmp, b=zeroJmp, out=negzeroJmp);
    Or(a=negzeroJmp, b=posJmp, out=isjmp);
    And(a=isjmp, b=instruction[15], out=pcload);
    // PC
    PC(in=Aregout, load=pcload, inc=true, reset=reset, out[0..14]=pc);
}